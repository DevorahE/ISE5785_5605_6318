package renderer;

import geometries.Intersectable;
import geometries.Sphere;
import geometries.Triangle;
import lighting.SpotLight;
import org.junit.jupiter.api.Test;
import primitives.Color;
import primitives.Material;
import primitives.Point;
import primitives.Vector;
import renderer.sampling.*;
import scene.Scene;

import static java.awt.Color.BLUE;

public class AntiAliasingTransparentSphereTest {
    /** Scene of the tests */
    private final Scene scene      = new Scene("Test scene");
    /** Camera builder of the tests */
    private final Camera.Builder camera     = Camera.getBuilder()
            .setLocation(new Point(0, 0, 1000))
            .setDirection(Point.ZERO, Vector.AXIS_Y)
            .setVpDistance(1000)
            .setVpSize(200, 200)
            .setRayTracer(scene, RayTracerType.SIMPLE);

    /** The sphere in the tests */
    private final Intersectable sphere     = new Sphere(60d,new Point(0, 0, -200))
            .setEmission(new Color(BLUE))
            .setMaterial(new Material().setKD(0.5).setKS(0.5).setShininess(30));
    /** The material of the triangles in the tests */
    private final Material       trMaterial = new Material().setKD(0.5).setKS(0.5).setShininess(30);
    /** Sphere-Triangle shading - move spot closer */
    @Test
    void sphereTriangleSpot1() {
        sphereTriangleHelper("shadowSphere1antiAlias", //
                new Triangle(new Point(-70, -40, 0), new Point(-40, -70, 0), new Point(-68, -68, -4)), //
                new Point(-90,-90,150));
    }
    /**
     * Helper function for the tests in this module
     * @param pictName     the name of the picture generated by a test
     * @param triangle     the triangle in the test
     * @param spotLocation the spotlight location in the test
     */
    private void sphereTriangleHelper(String pictName, Triangle triangle, Point spotLocation) {
        scene.geometries.add(sphere, triangle.setEmission(new Color(BLUE)).setMaterial(trMaterial));
        scene.lights //
                .add(new SpotLight(new Color(400, 240, 0), spotLocation, new Vector(1, 1, -3)) //
                        .setKl(1E-5).setKq(1.5E-7));
        camera
                .setResolution(400, 400) //
                .build() //
                .renderImage() //
                .writeToImage(pictName+ "WithoutAntiAliasing");

        // Enable 81 sample grid super-sampling (from first version)
        camera
                .setResolution(400, 400)
                .setSamplingConfig(new SamplingConfig(
                        81, TargetShape.RECTANGLE, SamplingPattern.GRID))
                .build() //
                .renderImage() //
                .writeToImage(pictName+ "WithAntiAliasing");

    }
}
